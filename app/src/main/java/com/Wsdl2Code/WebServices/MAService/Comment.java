package com.Wsdl2Code.WebServices.MAService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 5/15/2016 6:42:16 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class Comment implements KvmSerializable {
    
    public int commentId;
    public String name;
    public String text;
    public String date;
    public String photoLink;
    
    public Comment(){}
    
    public Comment(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("commentId"))
        {
            Object obj = soapObject.getProperty("commentId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                commentId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                commentId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) obj;
            }
        }
        if (soapObject.hasProperty("Text"))
        {
            Object obj = soapObject.getProperty("Text");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                text = j.toString();
            }else if (obj!= null && obj instanceof String){
                text = (String) obj;
            }
        }
        if (soapObject.hasProperty("Date"))
        {
            Object obj = soapObject.getProperty("Date");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                date = j.toString();
            }else if (obj!= null && obj instanceof String){
                date = (String) obj;
            }
        }
        if (soapObject.hasProperty("PhotoLink"))
        {
            Object obj = soapObject.getProperty("PhotoLink");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                photoLink = j.toString();
            }else if (obj!= null && obj instanceof String){
                photoLink = (String) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return commentId;
            case 1:
                return name;
            case 2:
                return text;
            case 3:
                return date;
            case 4:
                return photoLink;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 5;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "commentId";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Text";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Date";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PhotoLink";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
