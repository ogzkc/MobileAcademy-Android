package com.Wsdl2Code.WebServices.MAService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 5/15/2016 6:42:16 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class Document implements KvmSerializable {

    public boolean isDown;
    public int docId;
    public String documentName;
    public String displayName;
    public String publisherName;
    public int publisherID;
    public String departmentName;
    public int departmentID;
    public String departmentLogo;
    public int price;
    public int point;
    public int myRate;
    public boolean isHave;
    public String typeName;
    public int docTypeID;
    public String tableofContentLink;
    public String previewLink;
    public String pDFLink;
    public int pageNumber;
    public String description;
    public boolean hidden;
    public int status;
    public int version;
    
    public Document(){}
    
    public Document(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("docId"))
        {
            Object obj = soapObject.getProperty("docId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                docId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                docId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DocumentName"))
        {
            Object obj = soapObject.getProperty("DocumentName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                documentName = j.toString();
            }else if (obj!= null && obj instanceof String){
                documentName = (String) obj;
            }
        }
        if (soapObject.hasProperty("DisplayName"))
        {
            Object obj = soapObject.getProperty("DisplayName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                displayName = j.toString();
            }else if (obj!= null && obj instanceof String){
                displayName = (String) obj;
            }
        }
        if (soapObject.hasProperty("PublisherName"))
        {
            Object obj = soapObject.getProperty("PublisherName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                publisherName = j.toString();
            }else if (obj!= null && obj instanceof String){
                publisherName = (String) obj;
            }
        }
        if (soapObject.hasProperty("PublisherID"))
        {
            Object obj = soapObject.getProperty("PublisherID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                publisherID = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                publisherID = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DepartmentName"))
        {
            Object obj = soapObject.getProperty("DepartmentName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                departmentName = j.toString();
            }else if (obj!= null && obj instanceof String){
                departmentName = (String) obj;
            }
        }
        if (soapObject.hasProperty("DepartmentID"))
        {
            Object obj = soapObject.getProperty("DepartmentID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                departmentID = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                departmentID = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("DepartmentLogo"))
        {
            Object obj = soapObject.getProperty("DepartmentLogo");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                departmentLogo = j.toString();
            }else if (obj!= null && obj instanceof String){
                departmentLogo = (String) obj;
            }
        }
        if (soapObject.hasProperty("Price"))
        {
            Object obj = soapObject.getProperty("Price");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                price = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                price = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Point"))
        {
            Object obj = soapObject.getProperty("Point");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                point = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                point = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("myRate"))
        {
            Object obj = soapObject.getProperty("myRate");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                myRate = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                myRate = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("isHave"))
        {
            Object obj = soapObject.getProperty("isHave");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                isHave = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                isHave = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("TypeName"))
        {
            Object obj = soapObject.getProperty("TypeName");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                typeName = j.toString();
            }else if (obj!= null && obj instanceof String){
                typeName = (String) obj;
            }
        }
        if (soapObject.hasProperty("DocTypeID"))
        {
            Object obj = soapObject.getProperty("DocTypeID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                docTypeID = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                docTypeID = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("TableofContentLink"))
        {
            Object obj = soapObject.getProperty("TableofContentLink");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                tableofContentLink = j.toString();
            }else if (obj!= null && obj instanceof String){
                tableofContentLink = (String) obj;
            }
        }
        if (soapObject.hasProperty("PreviewLink"))
        {
            Object obj = soapObject.getProperty("PreviewLink");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                previewLink = j.toString();
            }else if (obj!= null && obj instanceof String){
                previewLink = (String) obj;
            }
        }
        if (soapObject.hasProperty("PDFLink"))
        {
            Object obj = soapObject.getProperty("PDFLink");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pDFLink = j.toString();
            }else if (obj!= null && obj instanceof String){
                pDFLink = (String) obj;
            }
        }
        if (soapObject.hasProperty("PageNumber"))
        {
            Object obj = soapObject.getProperty("PageNumber");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                pageNumber = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                pageNumber = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Description"))
        {
            Object obj = soapObject.getProperty("Description");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                description = j.toString();
            }else if (obj!= null && obj instanceof String){
                description = (String) obj;
            }
        }
        if (soapObject.hasProperty("Hidden"))
        {
            Object obj = soapObject.getProperty("Hidden");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                hidden = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                hidden = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Status"))
        {
            Object obj = soapObject.getProperty("Status");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                status = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                status = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Version"))
        {
            Object obj = soapObject.getProperty("Version");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                version = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                version = (Integer) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return docId;
            case 1:
                return documentName;
            case 2:
                return displayName;
            case 3:
                return publisherName;
            case 4:
                return publisherID;
            case 5:
                return departmentName;
            case 6:
                return departmentID;
            case 7:
                return departmentLogo;
            case 8:
                return price;
            case 9:
                return point;
            case 10:
                return myRate;
            case 11:
                return isHave;
            case 12:
                return typeName;
            case 13:
                return docTypeID;
            case 14:
                return tableofContentLink;
            case 15:
                return previewLink;
            case 16:
                return pDFLink;
            case 17:
                return pageNumber;
            case 18:
                return description;
            case 19:
                return hidden;
            case 20:
                return status;
            case 21:
                return version;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 22;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "docId";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DocumentName";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DisplayName";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PublisherName";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PublisherID";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DepartmentName";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DepartmentID";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DepartmentLogo";
                break;
            case 8:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Price";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Point";
                break;
            case 10:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "myRate";
                break;
            case 11:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "isHave";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TypeName";
                break;
            case 13:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "DocTypeID";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "TableofContentLink";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PreviewLink";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PDFLink";
                break;
            case 17:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "PageNumber";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Description";
                break;
            case 19:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Hidden";
                break;
            case 20:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Status";
                break;
            case 21:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Version";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
