package com.Wsdl2Code.WebServices.MAService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 5/15/2016 6:58:46 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import android.os.AsyncTask;

import com.Wsdl2Code.WebServices.MAService.WS_Enums.SoapProtocolVersion;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import java.util.List;

public class MAService {
    
    public String NAMESPACE ="http://tempuri.org/";
    public String url="*********";
    public int timeOut = 15000;
    public IWsdl2CodeEvents eventHandler;
    public SoapProtocolVersion soapVersion;
    private final String SERVICE_PASS = "****";
    
    public MAService(){}
    
    public MAService(IWsdl2CodeEvents eventHandler)
    {
        this.eventHandler = eventHandler;
    }
    public MAService(IWsdl2CodeEvents eventHandler,String url)
    {
        this.eventHandler = eventHandler;
        this.url = url;
    }
    public MAService(IWsdl2CodeEvents eventHandler,String url,int timeOutInSeconds)
    {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }
    public void setTimeOut(int seconds){
        this.timeOut = seconds * 1000;
    }
    public void setUrl(final String url){
        this.url = url;
    }
    
    public void RegisterWithEmailAsync(final String name,String surname,String email,String password,String school,String gender,String platformID) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        RegisterWithEmailAsync( name, surname, email, password, school, gender, platformID, null);
    }
    
    public void RegisterWithEmailAsync(final String name,final String surname,final String email,final String password,final String school,final String gender,final String platformID,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return RegisterWithEmail( name, surname, email, password, school, gender, platformID, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("RegisterWithEmail", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA RegisterWithEmail(final String name,String surname,String email,String password,String school,String gender,String platformID){
        return RegisterWithEmail( name, surname, email, password, school, gender, platformID, null);
    }
    
    public ResponseMA RegisterWithEmail(final String name,String surname,String email,String password,String school,String gender,String platformID,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","RegisterWithEmail");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("name",name);
        soapReq.addProperty("surname",surname);
        soapReq.addProperty("email",email);
        soapReq.addProperty("password",password);
        soapReq.addProperty("school",school);
        soapReq.addProperty("gender",gender);
        soapReq.addProperty("platformID",platformID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/RegisterWithEmail", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/RegisterWithEmail", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void ConfirmAccountAsync(final String email_Decoded,String confirmCode) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        ConfirmAccountAsync( email_Decoded, confirmCode, null);
    }
    
    public void ConfirmAccountAsync(final String email_Decoded,final String confirmCode,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return ConfirmAccount( email_Decoded, confirmCode, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("ConfirmAccount", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA ConfirmAccount(final String email_Decoded,String confirmCode){
        return ConfirmAccount( email_Decoded, confirmCode, null);
    }
    
    public ResponseMA ConfirmAccount(final String email_Decoded,String confirmCode,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","ConfirmAccount");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("email_Decoded",email_Decoded);
        soapReq.addProperty("confirmCode",confirmCode);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/ConfirmAccount", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/ConfirmAccount", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void LoginWithEmailPasswordAsync(final String email_encoded,String password_encoded) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        LoginWithEmailPasswordAsync( email_encoded, password_encoded, null);
    }
    
    public void LoginWithEmailPasswordAsync(final String email_encoded,final String password_encoded,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return LoginWithEmailPassword( email_encoded, password_encoded, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("LoginWithEmailPassword", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA LoginWithEmailPassword(final String email_encoded,String password_encoded){
        return LoginWithEmailPassword( email_encoded, password_encoded, null);
    }
    
    public ResponseMA LoginWithEmailPassword(final String email_encoded,String password_encoded,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","LoginWithEmailPassword");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("email_encoded",email_encoded);
        soapReq.addProperty("password_encoded",password_encoded);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/LoginWithEmailPassword", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/LoginWithEmailPassword", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void LoginWithFacebookAsync(final String name,String surname,String email,String password,String school,String gender,String platformID,String fbID) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        LoginWithFacebookAsync( name, surname, email, password, school, gender, platformID, fbID, null);
    }
    
    public void LoginWithFacebookAsync(final String name,final String surname,final String email,final String password,final String school,final String gender,final String platformID,final String fbID,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return LoginWithFacebook( name, surname, email, password, school, gender, platformID, fbID, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("LoginWithFacebook", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA LoginWithFacebook(final String name,String surname,String email,String password,String school,String gender,String platformID,String fbID){
        return LoginWithFacebook( name, surname, email, password, school, gender, platformID, fbID, null);
    }
    
    public ResponseMA LoginWithFacebook(final String name,String surname,String email,String password,String school,String gender,String platformID,String fbID,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","LoginWithFacebook");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("name",name);
        soapReq.addProperty("surname",surname);
        soapReq.addProperty("email",email);
        soapReq.addProperty("password",password);
        soapReq.addProperty("school",school);
        soapReq.addProperty("gender",gender);
        soapReq.addProperty("platformID",platformID);
        soapReq.addProperty("fbID",fbID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/LoginWithFacebook", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/LoginWithFacebook", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void LoginWithGoogleAsync(final String name,String surname,String email,String password,String school,String gender,String platformID,String gPLink) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        LoginWithGoogleAsync( name, surname, email, password, school, gender, platformID, gPLink, null);
    }
    
    public void LoginWithGoogleAsync(final String name,final String surname,final String email,final String password,final String school,final String gender,final String platformID,final String gPLink,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return LoginWithGoogle( name, surname, email, password, school, gender, platformID, gPLink, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("LoginWithGoogle", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA LoginWithGoogle(final String name,String surname,String email,String password,String school,String gender,String platformID,String gPLink){
        return LoginWithGoogle( name, surname, email, password, school, gender, platformID, gPLink, null);
    }
    
    public ResponseMA LoginWithGoogle(final String name,String surname,String email,String password,String school,String gender,String platformID,String gPLink,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","LoginWithGoogle");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("name",name);
        soapReq.addProperty("surname",surname);
        soapReq.addProperty("email",email);
        soapReq.addProperty("password",password);
        soapReq.addProperty("school",school);
        soapReq.addProperty("gender",gender);
        soapReq.addProperty("platformID",platformID);
        soapReq.addProperty("GPLink",gPLink);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/LoginWithGoogle", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/LoginWithGoogle", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void LoginWithGoogleV2Async(final String name,String surname,String email,String password,String school,String gender,String platformID,String gPLink,String googlePhotoURL) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        LoginWithGoogleV2Async( name, surname, email, password, school, gender, platformID, gPLink, googlePhotoURL, null);
    }
    
    public void LoginWithGoogleV2Async(final String name,final String surname,final String email,final String password,final String school,final String gender,final String platformID,final String gPLink,final String googlePhotoURL,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return LoginWithGoogleV2( name, surname, email, password, school, gender, platformID, gPLink, googlePhotoURL, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("LoginWithGoogleV2", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA LoginWithGoogleV2(final String name,String surname,String email,String password,String school,String gender,String platformID,String gPLink,String googlePhotoURL){
        return LoginWithGoogleV2( name, surname, email, password, school, gender, platformID, gPLink, googlePhotoURL, null);
    }
    
    public ResponseMA LoginWithGoogleV2(final String name,String surname,String email,String password,String school,String gender,String platformID,String gPLink,String googlePhotoURL,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","LoginWithGoogleV2");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("name",name);
        soapReq.addProperty("surname",surname);
        soapReq.addProperty("email",email);
        soapReq.addProperty("password",password);
        soapReq.addProperty("school",school);
        soapReq.addProperty("gender",gender);
        soapReq.addProperty("platformID",platformID);
        soapReq.addProperty("GPLink",gPLink);
        soapReq.addProperty("GooglePhotoURL",googlePhotoURL);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/LoginWithGoogleV2", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/LoginWithGoogleV2", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getLibraryByUserAsync(final int userId,String registerType,String google_FBID,String email,String password) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getLibraryByUserAsync( userId, registerType, google_FBID, email, password, null);
    }
    
    public void getLibraryByUserAsync(final int userId,final String registerType,final String google_FBID,final String email,final String password,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return getLibraryByUser( userId, registerType, google_FBID, email, password, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getLibraryByUser", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA getLibraryByUser(final int userId,String registerType,String google_FBID,String email,String password){
        return getLibraryByUser( userId, registerType, google_FBID, email, password, null);
    }
    
    public ResponseMA getLibraryByUser(final int userId,String registerType,String google_FBID,String email,String password,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getLibraryByUser");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("RegisterType",registerType);
        soapReq.addProperty("google_FBID",google_FBID);
        soapReq.addProperty("email",email);
        soapReq.addProperty("password",password);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getLibraryByUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getLibraryByUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getDocumentsByDepartmentAsync(final int userId,int depId,int page) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getDocumentsByDepartmentAsync( userId, depId, page, null);
    }
    
    public void getDocumentsByDepartmentAsync(final int userId,final int depId,final int page,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return getDocumentsByDepartment( userId, depId, page, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getDocumentsByDepartment", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA getDocumentsByDepartment(final int userId,int depId,int page){
        return getDocumentsByDepartment( userId, depId, page, null);
    }
    
    public ResponseMA getDocumentsByDepartment(final int userId,int depId,int page,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getDocumentsByDepartment");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("depId",depId);
        soapReq.addProperty("page",page);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getDocumentsByDepartment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getDocumentsByDepartment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getDepartmentsAsync(final String servicePass) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getDepartmentsAsync();
    }
    
    public void getDepartmentsAsync() throws Exception{
        
        new AsyncTask<Void, Void, VectorDepartment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorDepartment doInBackground(Void... params) {
                return getDepartments();
            }
            @Override
            protected void onPostExecute(VectorDepartment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getDepartments", result);
                }
            }
        }.execute();
    }
    
    public VectorDepartment getDepartments(){
        return getDepartments();
    }
    
    public VectorDepartment getDepartments(List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getDepartments");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getDepartments", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getDepartments", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorDepartment resultVariable = new VectorDepartment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getDocumentsByNameAndDepartmentAsync(final int userId,String searchWord,int depId,int page) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getDocumentsByNameAndDepartmentAsync( userId, searchWord, depId, page, null);
    }
    
    public void getDocumentsByNameAndDepartmentAsync(final int userId,final String searchWord,final int depId,final int page,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return getDocumentsByNameAndDepartment( userId, searchWord, depId, page, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getDocumentsByNameAndDepartment", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA getDocumentsByNameAndDepartment(final int userId,String searchWord,int depId,int page){
        return getDocumentsByNameAndDepartment( userId, searchWord, depId, page, null);
    }
    
    public ResponseMA getDocumentsByNameAndDepartment(final int userId,String searchWord,int depId,int page,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getDocumentsByNameAndDepartment");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("searchWord",searchWord);
        soapReq.addProperty("depId",depId);
        soapReq.addProperty("page",page);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getDocumentsByNameAndDepartment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getDocumentsByNameAndDepartment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void getCommentsAsync(final int docId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        getCommentsAsync( docId, null);
    }
    
    public void getCommentsAsync(final int docId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, VectorComment>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected VectorComment doInBackground(Void... params) {
                return getComments( docId, headers);
            }
            @Override
            protected void onPostExecute(VectorComment result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("getComments", result);
                }
            }
        }.execute();
    }
    
    public VectorComment getComments(int docId){
        return getComments( docId, null);
    }
    
    public VectorComment getComments(int docId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","getComments");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("docId",docId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/getComments", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/getComments", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    VectorComment resultVariable = new VectorComment(j);
                    return resultVariable;
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void makeCommentAsync(final int userId,int docId,String commentText) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        makeCommentAsync( userId, docId, commentText, null);
    }
    
    public void makeCommentAsync(final int userId,final int docId,final String commentText,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return makeComment( userId, docId, commentText, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("makeComment", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA makeComment(final int userId,int docId,String commentText){
        return makeComment( userId, docId, commentText, null);
    }
    
    public ResponseMA makeComment(final int userId,int docId,String commentText,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","makeComment");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("docId",docId);
        soapReq.addProperty("commentText",commentText);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/makeComment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/makeComment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void reportCommentAsync(final int userId,int commentId,String message) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        reportCommentAsync( userId, commentId, message, null);
    }
    
    public void reportCommentAsync(final int userId,final int commentId,final String message,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return reportComment( userId, commentId, message, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("reportComment", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA reportComment(final int userId,int commentId,String message){
        return reportComment( userId, commentId, message, null);
    }
    
    public ResponseMA reportComment(final int userId,int commentId,String message,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","reportComment");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("commentId",commentId);
        soapReq.addProperty("message",message);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/reportComment", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/reportComment", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void rateDocumentAsync(final int userId,int docId,int point,int platformId) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        rateDocumentAsync( userId, docId, point, platformId, null);
    }
    
    public void rateDocumentAsync(final int userId,final int docId,final int point,final int platformId,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return rateDocument( userId, docId, point, platformId, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("rateDocument", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA rateDocument(final int userId,int docId,int point,int platformId){
        return rateDocument( userId, docId, point, platformId, null);
    }
    
    public ResponseMA rateDocument(final int userId,int docId,int point,int platformId,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","rateDocument");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("docId",docId);
        soapReq.addProperty("point",point);
        soapReq.addProperty("platformId",platformId);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/rateDocument", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/rateDocument", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void addToLibraryAsync(final int userId,int docId,int platformId,int price) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        addToLibraryAsync( userId, docId, platformId, price, null);
    }
    
    public void addToLibraryAsync(final int userId,final int docId,final int platformId,final int price,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return addToLibrary( userId, docId, platformId, price, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("addToLibrary", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA addToLibrary(final int userId,int docId,int platformId,int price){
        return addToLibrary( userId, docId, platformId, price, null);
    }
    
    public ResponseMA addToLibrary(final int userId,int docId,int platformId,int price,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","addToLibrary");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("docId",docId);
        soapReq.addProperty("platformId",platformId);
        soapReq.addProperty("price",price);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/addToLibrary", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/addToLibrary", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void updateUserAsync(final int userId,String registerType,String google_FBID,String email,String password,String name_new,String surname_new,String email_new,String password_new,String school_new,String gender_new,String nickname_new,String platformID) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        updateUserAsync( userId, registerType, google_FBID, email, password, name_new, surname_new, email_new, password_new, school_new, gender_new, nickname_new, platformID, null);
    }
    
    public void updateUserAsync(final int userId,final String registerType,final String google_FBID,final String email,final String password,final String name_new,final String surname_new,final String email_new,final String password_new,final String school_new,final String gender_new,final String nickname_new,final String platformID,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return updateUser( userId, registerType, google_FBID, email, password, name_new, surname_new, email_new, password_new, school_new, gender_new, nickname_new, platformID, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("updateUser", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA updateUser(final int userId,String registerType,String google_FBID,String email,String password,String name_new,String surname_new,String email_new,String password_new,String school_new,String gender_new,String nickname_new,String platformID){
        return updateUser( userId, registerType, google_FBID, email, password, name_new, surname_new, email_new, password_new, school_new, gender_new, nickname_new, platformID, null);
    }
    
    public ResponseMA updateUser(final int userId,String registerType,String google_FBID,String email,String password,String name_new,String surname_new,String email_new,String password_new,String school_new,String gender_new,String nickname_new,String platformID,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","updateUser");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("RegisterType",registerType);
        soapReq.addProperty("google_FBID",google_FBID);
        soapReq.addProperty("email",email);
        soapReq.addProperty("password",password);
        soapReq.addProperty("name_new",name_new);
        soapReq.addProperty("surname_new",surname_new);
        soapReq.addProperty("email_new",email_new);
        soapReq.addProperty("password_new",password_new);
        soapReq.addProperty("school_new",school_new);
        soapReq.addProperty("gender_new",gender_new);
        soapReq.addProperty("nickname_new",nickname_new);
        soapReq.addProperty("platformID",platformID);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/updateUser", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/updateUser", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
    public void sendFeedbackAsync(final int userId,int platformId,String message,int point) throws Exception{
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        sendFeedbackAsync( userId, platformId, message, point, null);
    }
    
    public void sendFeedbackAsync(final int userId,final int platformId,final String message,final int point,final List<HeaderProperty> headers) throws Exception{
        
        new AsyncTask<Void, Void, ResponseMA>(){
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            };
            @Override
            protected ResponseMA doInBackground(Void... params) {
                return sendFeedback( userId, platformId, message, point, headers);
            }
            @Override
            protected void onPostExecute(ResponseMA result)
            {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null){
                    eventHandler.Wsdl2CodeFinished("sendFeedback", result);
                }
            }
        }.execute();
    }
    
    public ResponseMA sendFeedback(final int userId,int platformId,String message,int point){
        return sendFeedback( userId, platformId, message, point, null);
    }
    
    public ResponseMA sendFeedback(final int userId,int platformId,String message,int point,List<HeaderProperty> headers){
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://tempuri.org/","sendFeedback");
        soapReq.addProperty("servicePass",SERVICE_PASS);
        soapReq.addProperty("userId",userId);
        soapReq.addProperty("platformId",platformId);
        soapReq.addProperty("message",message);
        soapReq.addProperty("point",point);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url,timeOut);
        try{
            if (headers!=null){
                httpTransport.call("http://tempuri.org/sendFeedback", soapEnvelope,headers);
            }else{
                httpTransport.call("http://tempuri.org/sendFeedback", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault){
                SoapFault fault = (SoapFault)retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            }else{
                SoapObject result=(SoapObject)retObj;
                if (result.getPropertyCount() > 0){
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject)obj;
                    ResponseMA resultVariable =  new ResponseMA (j);
                    return resultVariable;
                    
                }
            }
        }catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }
    
}
