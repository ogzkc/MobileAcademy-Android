package com.Wsdl2Code.WebServices.MAService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 5/15/2016 6:42:16 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import com.Wsdl2Code.WebServices.MAService.Error;
import com.Wsdl2Code.WebServices.MAService.Status;
import com.Wsdl2Code.WebServices.MAService.User;
import com.Wsdl2Code.WebServices.MAService.Library;
import com.Wsdl2Code.WebServices.MAService.Alert;
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class ResponseMA implements KvmSerializable {
    
    public String message;
    public boolean success;
    public Error error;
    public Status status;
    public User user;
    public Library library;
    public Alert announcement;
    public Alert versionControl;
    
    public ResponseMA(){}
    
    public ResponseMA(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Message"))
        {
            Object obj = soapObject.getProperty("Message");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                message = j.toString();
            }else if (obj!= null && obj instanceof String){
                message = (String) obj;
            }
        }
        if (soapObject.hasProperty("Success"))
        {
            Object obj = soapObject.getProperty("Success");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                success = Boolean.parseBoolean(j.toString());
            }else if (obj!= null && obj instanceof Boolean){
                success = (Boolean) obj;
            }
        }
        if (soapObject.hasProperty("Error"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Error");
            error =  new Error (j);
            
        }
        if (soapObject.hasProperty("Status"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Status");
            status =  new Status (j);
            
        }
        if (soapObject.hasProperty("User"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("User");
            user =  new User (j);
            
        }
        if (soapObject.hasProperty("Library"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Library");
            library =  new Library (j);
            
        }
        if (soapObject.hasProperty("Announcement"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("Announcement");
            announcement =  new Alert (j);
            
        }
        if (soapObject.hasProperty("VersionControl"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("VersionControl");
            versionControl =  new Alert (j);
            
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return message;
            case 1:
                return success;
            case 2:
                return error;
            case 3:
                return status;
            case 4:
                return user;
            case 5:
                return library;
            case 6:
                return announcement;
            case 7:
                return versionControl;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 8;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Message";
                break;
            case 1:
                info.type = PropertyInfo.BOOLEAN_CLASS;
                info.name = "Success";
                break;
            case 2:
                info.type = Error.class;
                info.name = "Error";
                break;
            case 3:
                info.type = Status.class;
                info.name = "Status";
                break;
            case 4:
                info.type = User.class;
                info.name = "User";
                break;
            case 5:
                info.type = Library.class;
                info.name = "Library";
                break;
            case 6:
                info.type = Alert.class;
                info.name = "Announcement";
                break;
            case 7:
                info.type = Alert.class;
                info.name = "VersionControl";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
