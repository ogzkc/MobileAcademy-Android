package com.Wsdl2Code.WebServices.MAService;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 5/15/2016 6:42:16 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//
import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import java.util.Hashtable;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

public class User implements KvmSerializable {
    
    public String email;
    public String nickname;
    public String name;
    public String surname;
    public String registerType;
    public String gPLink;
    public String fbID;
    public String school;
    public String gender;
    public int userId;
    public int coin;
    
    public User(){}
    
    public User(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("Email"))
        {
            Object obj = soapObject.getProperty("Email");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                email = j.toString();
            }else if (obj!= null && obj instanceof String){
                email = (String) obj;
            }
        }
        if (soapObject.hasProperty("Nickname"))
        {
            Object obj = soapObject.getProperty("Nickname");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                nickname = j.toString();
            }else if (obj!= null && obj instanceof String){
                nickname = (String) obj;
            }
        }
        if (soapObject.hasProperty("Name"))
        {
            Object obj = soapObject.getProperty("Name");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                name = j.toString();
            }else if (obj!= null && obj instanceof String){
                name = (String) obj;
            }
        }
        if (soapObject.hasProperty("Surname"))
        {
            Object obj = soapObject.getProperty("Surname");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                surname = j.toString();
            }else if (obj!= null && obj instanceof String){
                surname = (String) obj;
            }
        }
        if (soapObject.hasProperty("RegisterType"))
        {
            Object obj = soapObject.getProperty("RegisterType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                registerType = j.toString();
            }else if (obj!= null && obj instanceof String){
                registerType = (String) obj;
            }
        }
        if (soapObject.hasProperty("GPLink"))
        {
            Object obj = soapObject.getProperty("GPLink");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gPLink = j.toString();
            }else if (obj!= null && obj instanceof String){
                gPLink = (String) obj;
            }
        }
        if (soapObject.hasProperty("fbID"))
        {
            Object obj = soapObject.getProperty("fbID");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                fbID = j.toString();
            }else if (obj!= null && obj instanceof String){
                fbID = (String) obj;
            }
        }
        if (soapObject.hasProperty("School"))
        {
            Object obj = soapObject.getProperty("School");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                school = j.toString();
            }else if (obj!= null && obj instanceof String){
                school = (String) obj;
            }
        }
        if (soapObject.hasProperty("Gender"))
        {
            Object obj = soapObject.getProperty("Gender");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                gender = j.toString();
            }else if (obj!= null && obj instanceof String){
                gender = (String) obj;
            }
        }
        if (soapObject.hasProperty("userId"))
        {
            Object obj = soapObject.getProperty("userId");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                userId = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                userId = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Coin"))
        {
            Object obj = soapObject.getProperty("Coin");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)){
                SoapPrimitive j =(SoapPrimitive) obj;
                coin = Integer.parseInt(j.toString());
            }else if (obj!= null && obj instanceof Number){
                coin = (Integer) obj;
            }
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return email;
            case 1:
                return nickname;
            case 2:
                return name;
            case 3:
                return surname;
            case 4:
                return registerType;
            case 5:
                return gPLink;
            case 6:
                return fbID;
            case 7:
                return school;
            case 8:
                return gender;
            case 9:
                return userId;
            case 10:
                return coin;
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 11;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Email";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Nickname";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Name";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Surname";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "RegisterType";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "GPLink";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "fbID";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "School";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Gender";
                break;
            case 9:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "userId";
                break;
            case 10:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "Coin";
                break;
        }
    }
    
    @Override
    public String getInnerText() {
        return null;
    }
    
    
    @Override
    public void setInnerText(String s) {
    }
    
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
}
